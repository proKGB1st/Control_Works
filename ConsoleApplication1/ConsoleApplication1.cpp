#include <string>
#include <iostream>
#include <vector>
#include <locale>

#define ASIZE 4

using namespace std;

//  Урок 1. Контрольная работа.
//    Данная работа необходима для проверки ваших знаний и навыков по итогу прохождения первого блока обучения на программе Разработчик.
//    Мы должны убедится, что базовое знакомство с IT прошло успешно.
//  
//  Задача.
//    Aлгоритмически не самая сложная, однако для полноценного выполнения проверочной работы необходимо:
//      1. Создать репозиторий на GitHub
//      2. Нарисовать блок - схему алгоритма(можно обойтись блок - схемой основной содержательной части, если вы выделяете её в отдельный метод)
//      3. Снабдить репозиторий оформленным текстовым описанием решения(файл README.md)
//      4. Написать программу, решающую поставленную задачу
//      5. Использовать контроль версий в работе над этим небольшим проектом(не должно быть так, что всё залито одним коммитом, как минимум этапы 2, 3, и 4 должны быть расположены в разных коммитах)

int main()
{
  setlocale(0, "RUS");

  static const char TASK[] = 
    "=== Задача ==================================================================================================="
    "\n    Написать программу, которая из имеющегося массива строк формирует новый массив из строк,\n    длина которых меньше, либо равна 3 символам."
    " Первоначальный массив можно ввести с клавиатуры,\n    либо задать на старте выполнения алгоритма."
  ;

  cout << TASK << endl << endl;
  
  string szString;
  vector<string> szVector;

  cout << "Введите строку (будет помещена в массив): ";
  while (getline(cin, szString))
  {
    cout << "\tВы ввели: " << szString << endl;
    szVector.push_back(szString);
    if (szVector.size() == ASIZE) {
      break;
    }
    cout << endl << "Введите следующую строку: ";
  }

  cout << endl;
  {
    vector<string> szTempVector;
    for (auto it = szVector.begin(); it < szVector.end(); ++it) {
      if ((*it).size() < 4) {
        szTempVector.push_back((*it));
      }
    }
    szVector = szTempVector;
  }
  
  cout << "Out vector:";
  for (auto it = szVector.begin(); it < szVector.end(); ++it) {
    cout << " " << *it;
  }

  getline(cin, szString);
}
